{"version":3,"sources":["api/unsplash.js","components/SearchBar.js","components/ImageCard.js","components/ImageList.js","components/App.js","index.js"],"names":["axios","create","baseURL","headers","Authorization","SearchBar","state","term","onFormSubmit","event","preventDefault","props","passingFromChildToParent","console","log","target","value","className","onSubmit","this","type","onChange","e","setState","React","Component","ImageCard","setSpans","height","imageRef","current","clientHeight","spans","Math","ceil","createRef","addEventListener","image","alt_description","urls","style","gridRowEnd","ref","alt","src","regular","ImageList","pics","images","map","key","id","App","onSearchSubmit","a","unsplash","get","params","query","response","data","results","marginTop","guessWhatIam","length","ReactDOM","render","document","querySelector"],"mappings":"yQAKeA,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,2BACTC,QAAS,CACLC,cACI,gFCiGGC,E,2MArGXC,MAAQ,CAAEC,KAAM,I,EAiChBC,aAAe,SAACC,GAGZA,EAAMC,iBAON,EAAKC,MAAMC,yBAAyB,EAAKN,MAAMC,O,4EAhCtCE,GACTI,QAAQC,IAAI,mBAAoBL,EAAMM,OAAOC,S,0CAI7CH,QAAQC,IAAI,6C,2CAIZD,QAAQC,IACN,wD,+BAyBI,IAAD,OACL,OACI,yBAAKG,UAAU,cAKX,0BAAMC,SAAUC,KAAKX,aAAcS,UAAU,WAMzC,yBAAKA,UAAU,SACX,+CAKA,2BAAQG,KAAK,OACLJ,MAAOG,KAAKb,MAAMC,KAClBc,SAAW,SAACC,GAAD,OAAO,EAAKC,SAAS,CAAEhB,KAAMe,EAAEP,OAAOC,kB,GAtEzDQ,IAAMC,WC4DfC,G,kBA1DX,WAAYf,GAAQ,IAAD,8BACf,4CAAMA,KAoBVgB,SAAW,WAEP,IAAMC,EAAS,EAAKC,SAASC,QAAQC,aAE/BC,EAAQC,KAAKC,KAAKN,EAAS,IAEjC,EAAKL,SAAS,CAAES,MAAOA,KAzBvB,EAAK1B,MAAQ,CAAE0B,MAAO,GACtB,EAAKH,SAAWL,IAAMW,YAHP,E,iFAWfhB,KAAKU,SAASC,QAAQM,iBAAiB,OAAQjB,KAAKQ,Y,6EAuB/C,MAE6BR,KAAKR,MAAM0B,MAArCC,EAFH,EAEGA,gBAAiBC,EAFpB,EAEoBA,KAEzB,OACI,yBAAKC,MAAO,CAAEC,WAAW,QAAD,OAAUtB,KAAKb,MAAM0B,SACzC,yBAAKU,IAAKvB,KAAKU,SAAUc,IAAKL,EAAiBM,IAAKL,EAAKM,e,GA1CjDrB,IAAMC,YC2BfqB,EAzBG,SAACnC,GAUf,IAAMoC,EAAOpC,EAAMqC,OAAOC,IAAK,SAACZ,GAC5B,OACI,kBAAC,EAAD,CAAWa,IAAKb,EAAMc,GAAId,MAAOA,MAUzC,OAAO,yBAAKpB,UAAU,cAAc8B,IC4EzBK,E,2MAzFX9C,MAAQ,CAAE0C,OAAQ,I,EAMlBK,e,sCAAiB,WAAO9C,GAAP,eAAA+C,EAAA,qEACUC,EAASC,IAAI,iBAAkB,CAC9CC,OAAQ,CAAEC,MAAOnD,KAFZ,OACPoD,EADO,OAOb,EAAKpC,SAAS,CAAEyB,OAAQW,EAASC,KAAKC,UAPzB,yC,yIAHb1C,KAAKkC,eAAe,qC,6EAoEpB,OACI,yBAAKpC,UAAU,eAAeuB,MAAO,CAAEsB,UAAW,SAI9C,kBAAC,EAAD,CACIlD,yBAA2BO,KAAKkC,eAChCU,aAAa,yBAEjB,6BARJ,UASY5C,KAAKb,MAAM0C,OAAOgB,OAT9B,UAUI,6BACA,kBAAC,EAAD,CAAWhB,OAAQ7B,KAAKb,MAAM0C,c,GAxF5BxB,IAAMC,WCJxBwC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,cAAc,Y","file":"static/js/main.bafa7cf7.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\n/*  getting preconfigured instance of the axios client,\r\n    which has default properties set to make a request or headers or even params.\r\n */\r\nexport default axios.create({\r\n    baseURL: 'https://api.unsplash.com',\r\n    headers: {\r\n        Authorization:\r\n            \"Client-ID 643433a97920869789cae69e46b76b94ab30aaf5a79de865989a1153ed3c3e45\"\r\n    }\r\n}); \r\n/*\r\n const searchImages = (term) => {\r\n\r\n }\r\n*/","import React from 'react';\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    /* this is for controlled event handler. */\r\n    state = { term: \"\" };\r\n\r\n    /* it is called whenever the input text is changed, which is callback function.\r\n       event is JavaScript object, which has a bunch of information about the event.\r\n       One of the properties we should take care of, is event.target.value\r\n    */\r\n    /*\r\n    onInputChange(event) {\r\n        console.log('onInputChange(): ', event.target.value);\r\n    }\r\n    */\r\n    onInputClick(event) {\r\n        console.log(\"onInputClick(): \", event.target.value);\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(\"My component was redered to the screen!\");\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        console.log(\r\n          \"My component was just updated! - it is rerendered!\"\r\n        );\r\n    }\r\n    /*\r\n    onFormSubmit(event) {\r\n        event.preventDefault();\r\n        console.log(this.state.term);\r\n    }\r\n    */\r\n    /* This function will be called, when user submits its input. */\r\n    /* the following arrow function function will automatically bind 'this', so that\r\n       this will indicate the 'SearchBar' React component.  */\r\n    onFormSubmit = (event) => {\r\n        /* This will disable defualt behavior of event handler, \r\n           which will refresh webpage whenever user submit its input. */\r\n        event.preventDefault();\r\n        /*  The following 'this' doesn't indicate 'SearchBar' React component itself.\r\n            For onFormSubmit() is called by onSubmit pros, and 'this' of 'this.onForSubmit'\r\n            doesn't indicate SearchBar class component anymore.\r\n        */\r\n        // console.log(this.state.term); \r\n\r\n        this.props.passingFromChildToParent(this.state.term);\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"ui segment\">\r\n                {/* We don't submit input value to backend server.    \r\n                    Instead, we add event handler thru the props, 'onSubmit',\r\n                    which is connected to callback function, onFormSubmit()\r\n                */}\r\n                <form onSubmit={this.onFormSubmit} className=\"ui form\">\r\n                {/* 'this' of this.onFormSubmit doesn't indicate SearchBar class component any\r\n                    more. */}\r\n                {/* the following arrow function will automatically bind this,\r\n                    so that this will indicate the 'SearchBar' React Component.   \r\n                <form onSubmit={ (e) => this.onFormSubmit(e) } className=\"ui form\">  */}\r\n                    <div className=\"field\">\r\n                        <label>Image Search</label>\r\n                        {/* This is controlled event handler. \r\n                            Whenever input is changed, this.state.term is also changed. \r\n                            this props, 'value' will overwrite the input value\r\n                        */}\r\n                        <input  type=\"text\"\r\n                                value={this.state.term}\r\n                                onChange={ (e) => this.setState({ term: e.target.value }) } \r\n                        />\r\n\r\n                        {/* Instead of callback function name, we could have ES6 arrow \r\n                            callback function definition. \r\n                            We don't have to have seperate method in React class component.\r\n                        */}\r\n                        {/*\r\n                        <input type=\"text\" onChange={ (e) => console.log(e.target.value)} />    \r\n                        */}\r\n                        {/* We use onInputChange, rather than onInputChange(), which is \r\n                            callback function.\r\n                            For we don't call onInputChange() whenver we render JSX. \r\n                            Instead, we just call onInputChange() in time in the future. \r\n                            We just pass the reference to this function to the input\r\n                            element so that input can call this function at some point\r\n                            in time in the future. \r\n                            The function is just called whenver input is changed. \r\n                            'onChange' is very important props, when it gets onInputChange as its value,\r\n                            'onInputChange()' is called whenever input text is changed. \r\n                            But, these props work with only input JSX element, now with <div> or \r\n                            <p>, etc. \r\n                            We can change the name of callback function, but cannot the name of \r\n                            props, 'onChange', 'onClick', etc. */}\r\n                        {/*    \r\n                        <input type=\"text\" onChange={this.onInputChange} onClick={this.onInputClick}/>\r\n                        */}\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default SearchBar;","import React from 'react';\r\n\r\nclass ImageCard extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { spans: 0 };\r\n        this.imageRef = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        /* not React, but JavaScript event listener can be added to prevent \r\n           React from getting zero value of height. \r\n           'load': not only HTML is loaded, but also all the external resources: \r\n           images, styles etc.*/\r\n        this.imageRef.current.addEventListener('load', this.setSpans);\r\n        /* we can the value of clientHeight, zero.\r\n\t       For when React the render JSX firstly, data from unsplash API server\r\n\t       is not fetched, yet. */\r\n        //console.log(this.imageRef);\r\n        //console.log(this.imageRef.current.clientHeight);\r\n    }\r\n\r\n    /* the value of grid-row-end in ImageLIst.css file, makes the value of span,\r\n       which is determined by the height of picture. */\r\n    setSpans = () => {\r\n        //console.log(this.imageRef.current.clientHeight);\r\n        const height = this.imageRef.current.clientHeight;\r\n\r\n        const spans = Math.ceil(height / 10);\r\n\r\n        this.setState({ spans: spans });\r\n    }\r\n\r\n    componentDidUpdate() {\r\n\r\n    }\r\n\r\n    render() {\r\n        /* de-structuring the props of <img />  */\r\n        const { alt_description, urls } = this.props.image;\r\n\r\n        return (\r\n            <div style={{ gridRowEnd: `span ${this.state.spans}` }}>\r\n                <img ref={this.imageRef} alt={alt_description} src={urls.regular} />\r\n            </div>\r\n        );\r\n    }\r\n    /*\r\n    render() {\r\n        return (\r\n            <div>\r\n                <img \r\n                    alt={this.props.image.alt_description} \r\n                    src={this.props.image.urls.regular}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n    */\r\n}\r\n\r\nexport default ImageCard;","import './ImageList.css';\r\nimport React from 'react';\r\nimport ImageCard from './ImageCard';\r\n\r\nconst ImageList = (props) => {\r\n    //console.log(props.images);\r\n    /* desstructuring for the props of image */\r\n    /*\r\n    const pics = props.images.map( ({ alt_description, id, urls }) => {\r\n      return (\r\n        <img key={id} alt={alt_description} src={urls.small} />\r\n      );\r\n    });\r\n    */\r\n    const pics = props.images.map( (image) => {\r\n        return (\r\n            <ImageCard key={image.id} image={image} />\r\n        );\r\n    });\r\n    /*\r\n    const pics = props.images.map((image) => {\r\n        return <img key={image.id} alt={image.alt_description} src={image.urls.small} />\r\n    });\r\n    */\r\n    //console.log(pics);\r\n\r\n    return <div className=\"image-list\">{pics}</div>;\r\n}\r\n\r\nexport default ImageList;","import React from 'react';\r\n/* axios is used to request splash API */\r\n//import axios from \"axios\";\r\nimport unsplash from '../api/unsplash';\r\nimport SearchBar from './SearchBar';\r\nimport ImageList from './ImageList';\r\n\r\n\r\nclass App extends React.Component {\r\n\r\n    /* We initialize the image property of state as empty array. \r\n       So, it could work with JavaScript method, map() \r\n       before we get images from API server.   */\r\n    state = { images: [] };\r\n    \r\n    componentDidMount() {\r\n        this.onSearchSubmit('worldwide best beautiful houses');\r\n    }\r\n\r\n    onSearchSubmit = async (term) => {\r\n        const response = await unsplash.get(\"/search/photos\", {\r\n                params: { query: term }\r\n            }\r\n        );\r\n        //console.log(response.data.results);\r\n        //console.log(this);\r\n        this.setState({ images: response.data.results });\r\n    }\r\n\r\n    /*\r\n    onSearchSubmit = async (term) => {\r\n        const response = await axios.get(\r\n            \"https://api.unsplash.com/search/photos\", {\r\n                params: { query: term },\r\n                headers: {\r\n                    Authorization:\r\n                    \"Client-ID 643433a97920869789cae69e46b76b94ab30aaf5a79de865989a1153ed3c3e45\"\r\n                }\r\n            }\r\n        );\r\n        //console.log(response.data.results);\r\n        console.log(this);\r\n        this.setState({ images: response.data.results });\r\n    }\r\n    */\r\n    /*\r\n    async onSearchSubmit(term) {\r\n        const response = await axios.get(\r\n            \"https://api.unsplash.com/search/photos\", {\r\n                params: { query: term },\r\n                headers: {\r\n                    Authorization:\r\n                    \"Client-ID 643433a97920869789cae69e46b76b94ab30aaf5a79de865989a1153ed3c3e45\"\r\n                }\r\n            }\r\n        );\r\n        //console.log(response.data.results);\r\n        console.log(this);\r\n        this.setState({ images: response.data.results });\r\n    }\r\n    */\r\n\r\n    /*\r\n    onSearchSubmit(term) {\r\n        //console.log(term);\r\n        axios.get(\"https://api.unsplash.com/search/photos\", {\r\n            params: { query: term },\r\n            headers: {\r\n                Authorization:\r\n                \"Client-ID 643433a97920869789cae69e46b76b94ab30aaf5a79de865989a1153ed3c3e45\"\r\n          }\r\n        })\r\n        /* the request of API is answered by response callback function,\r\n           which can be retrieved by response.data.results  */ /*\r\n        .then(response => {\r\n            console.log(response.data.results);\r\n        });\r\n    }\r\n    */\r\n    \r\n    componentDidUpdate() {\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"ui container\" style={{ marginTop: \"20px\" }}>\r\n                {/* 'this' is the props object   */}\r\n                {/* the following arrow function will automatically bind this,\r\n                    which will indicate App.js React component.  */}\r\n                <SearchBar \r\n                    passingFromChildToParent={ this.onSearchSubmit } \r\n                    guessWhatIam=\"I'm the props object\" \r\n                /> \r\n                <br />\r\n                Found: {this.state.images.length} images\r\n                <br />\r\n                <ImageList images={this.state.images} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.querySelector('#root'));"],"sourceRoot":""}